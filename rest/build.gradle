/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  ext {
	springBootVersion = '2.7.2'
	appName      = 'product-service'
	apiPackage   = 'productservice.api'
	modelPackage = 'productservice.model'
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath('io.swagger.codegen.v3:swagger-codegen-maven-plugin:3.0.34')
  }
}
import io.swagger.codegen.v3.CodegenConfigLoader
import io.swagger.codegen.v3.DefaultGenerator
import io.swagger.codegen.v3.ClientOptInput
import io.swagger.codegen.v3.ClientOpts
import io.swagger.v3.parser.OpenAPIV3Parser
import io.swagger.v3.parser.core.models.ParseOptions;




plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java'
    id 'java-library'
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
}
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
jar {
    enabled = true
}
bootJar {
	enabled = false
}
sourceSets {
    // Adding src/generated
    generated {
    }
    main {
    }
}

//with this, we can see the generated classes in another project
sourceSets.main.java.srcDirs += ['src/generated/java']
dependencies {

  // Spring Boot's web application support
	implementation('org.springframework.boot:spring-boot-starter-web')

	implementation 'io.swagger:swagger-annotations:1.6.6'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.1'
	implementation 'javax.validation:validation-api:2.0.1.Final'
}
	ext.apiPackage   = 'productservice.api'
	ext.modelPackage = 'productservice.model'
	ext.apiFile  = "${rootDir}/src/main/resources/api/api.yaml"
    // Actual task for generating the server
    task generateServer {
        doLast {
         	def parseOptions = new ParseOptions()
            parseOptions.setResolve(true)
            def openAPI = new OpenAPIV3Parser().read(apiFile.toString(), null, parseOptions)
            def clientOpts = new ClientOptInput().openAPI(openAPI)
            def codegenConfig = CodegenConfigLoader.forName('spring')
            codegenConfig.setOutputDir("${projectDir}/src/generated/java")
            
            clientOpts.setConfig(codegenConfig)
            
            def clientOps = new ClientOpts()
            clientOps.setProperties([
            		'dateLibrary'     : 'java8', // Date library to use
            		'interfaceOnly'   : 'true',   // Generating the Controller API interface and the models only
                    'apiPackage'      : project.apiPackage,
                	'modelPackage'    : project.modelPackage,
                	'library'		  : 'spring-boot',
                	'sourceFolder'	  : ''
            ])
            clientOpts.setOpts(clientOps)

            def generator = new DefaultGenerator().opts(clientOpts)
            println 'start generation'
            generator.generate() // Executing the generation
            println 'generation ended'
        }
    }
    /* Defining the order of the tasks and the dependency between them.
       As this is a Java project, it will execute the generateServer task first,
       then the compilation of the generated files.
     */
    compileJava.dependsOn('generateServer')
    compileGeneratedJava.dependsOn('generateServer')
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
configurations {
    generatedImplementation.extendsFrom(implementation)
}
