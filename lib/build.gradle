/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  ext {
	springBootVersion = '2.7.2'
	appName      = 'product-service'
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath "org.liquibase:liquibase-gradle-plugin:2.1.1"
  }
}


plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java'
    id 'java-library'
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    id 'org.liquibase.gradle' version '2.1.1'
    id 'net.ltgt.apt-eclipse' version "0.21"
    // gradle eclipseJdtApt eclipseFactorypath eclipseJdt
}
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.liquibase.gradle"

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

  // Spring Boot's web application support
	implementation('org.springframework.boot:spring-boot-starter-web')
	
	// Spring Boot's JPA support
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')

	// Spring Data REST support
	implementation('org.springframework.boot:spring-boot-starter-data-rest')
	


	// PostgresSQL-specific connector for JPA
	// https://mavenlibs.com/maven/dependency/org.postgresql/postgresql
	implementation 'org.postgresql:postgresql:42.4.0'
	
	implementation("org.liquibase:liquibase-core:4.13.0")
	implementation 'org.mapstruct:mapstruct:1.5.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
	//security
	//https://www.youtube.com/watch?v=MOCeQYbQPPU&ab_channel=DailyCodeBuffer
	//implementation('org.springframework.boot:spring-boot-starter-security')
	// https://mvnrepository.com/artifact/org.springframework.security.oauth/spring-security-oauth2
	//implementation 'org.springframework.security.oauth:spring-security-oauth2:2.5.2.RELEASE'
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-jwt
	//implementation 'org.springframework.security:spring-security-jwt:1.1.1.RELEASE'

	implementation("org.springframework.boot:spring-boot-starter-jdbc")
	
	implementation("org.springframework.boot:spring-boot-starter-integration:${springBootVersion}")
	implementation 'org.springframework.integration:spring-integration-core:5.5.13'
	implementation 'org.springframework.integration:spring-integration-xml:5.5.13'
	// https://mvnrepository.com/artifact/org.springframework.integration/spring-integration-ws
	implementation 'org.springframework.integration:spring-integration-ws:4.1.2.RELEASE'
	
	implementation 'javax.xml.soap:javax.xml.soap-api:1.4.0'
	implementation 'com.sun.xml.messaging.saaj:saaj-impl:1.5.1'

	implementation 'javax.validation:validation-api:2.0.1.Final'
	
	implementation project(':rest')
	//implementation 'io.springfox:springfox-oas:3.0.0'
	//implementation 'org.threeten:threetenbp:1.6.0'
	// Lombok autogenerates things like getters and setters
	//compileOnly('org.projectlombok:lombok')
	
	runtimeOnly 'com.h2database:h2'

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')
}
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
