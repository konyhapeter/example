/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

import io.swagger.codegen.v3.CodegenConfigLoader
import io.swagger.codegen.v3.DefaultGenerator
import io.swagger.codegen.v3.ClientOptInput
import io.swagger.codegen.v3.ClientOpts
import io.swagger.v3.parser.OpenAPIV3Parser
import io.swagger.v3.parser.core.models.ParseOptions;

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  ext {
	appName      = 'product-service'
	springBootVersion = '2.7.2'
  }
  dependencies {
  	classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath('io.swagger.codegen.v3:swagger-codegen-maven-plugin:3.0.34')
  }
}

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java'
    id 'java-library'
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
}


apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: "org.springframework.boot"
apply plugin: 'io.spring.dependency-management'

repositories {
    // Use Maven Central for resolving dependencies.
 
    mavenCentral()
}

jar {
    enabled = true
}
bootJar {
	enabled = false
}
sourceSets {
    // Adding src/generated
    generated {
    }
    // Setting src/main to depend on the dependencies and output of src/generated
    main {
        compileClasspath += generated.compileClasspath + generated.output
        runtimeClasspath += generated.runtimeClasspath + generated.output
    }
}

dependencies {

	  // Spring Boot's web application support
	implementation('org.springframework.boot:spring-boot-starter-web')

	// Spring Data REST support
	implementation('org.springframework.boot:spring-boot-starter-data-rest')

	implementation 'io.swagger:swagger-annotations:1.6.6'
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.1'
	implementation 'javax.validation:validation-api:2.0.1.Final'
}
	ext.apiPackage   = 'productservice.api'
	ext.modelPackage = 'productservice.model'
	ext.invokerPackage= 'productservice.client'
	ext.swaggerFile  = "${rootDir}/src/main/resources/api/swagger.yaml"
	
    task generateClient {
        doLast {
            
            def parseOptions = new ParseOptions()
            parseOptions.setResolve(true)
            def openAPI = new OpenAPIV3Parser().read(swaggerFile.toString(), null, parseOptions)
            def clientOptInput = new ClientOptInput().openAPI(openAPI)
            def codegenConfig = CodegenConfigLoader.forName('java')
            codegenConfig.setOutputDir("${projectDir}/src/generated/java")
            
            clientOptInput.setConfig(codegenConfig)
            
            if(JavaVersion.current() != JavaVersion.VERSION_11){
			    throw new GradleException("This build must be run with java 11")
			}
            def clientOps = new ClientOpts()
            clientOps.setProperties([
            		'dateLibrary'     : 'java8', // Date library to use
            		'interfaceOnly'   : 'true',   // Generating the Controller API interface and the models only
                    'apiPackage'      : project.apiPackage,
                	'modelPackage'    : project.modelPackage,
                	'invokerPackage'  : project.invokerPackage,
                	'library'		  : 'resttemplate',
                	'generateApiTests': 'false',
                	'sourceFolder'	  : ''
            ])
            clientOptInput.setOpts(clientOps)

            def generator = new DefaultGenerator().opts(clientOptInput)
            println 'start generation'
            generator.generate() // Executing the generation
            println 'generation ended'
        }
    }
    task deleteTestFilesTask(type: Delete) {
		    println 'delete'
			delete "${projectDir}/src/generated/java/src/test/java/productservice/api/ProductApiTest.java"
			println 'delete ended'
	}
    /* Defining the order of the tasks and the dependency between them.
       As this is a Java project, it will execute the generateServer task first,
       then the compilation of the generated files.
     */
    compileJava.dependsOn('generateClient')
    compileGeneratedJava.dependsOn('generateClient')
    compileGeneratedJava.dependsOn('deleteTestFilesTask')
tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
configurations {
    generatedImplementation.extendsFrom(implementation)
}
